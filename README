agent.py: AI to choose an optimal move
autorun.py: quackle vs CS221 AI mode
brain.py: the Appel-Jacobsen move generator + Monte Carlo simulation
baseline.py: baseline implementation from proposal
board.py: the Scrabble board object 
boardTests.py: unit tests for board functionality
brainTests.py: unit tests for move generator
images/: images for our progress and final reports
letterbag.py: the object that holds Scrabble tiles
oracle.py: our oracle implementation
pdfs/: pdfs of our proposal, progress, and poster
pygtrie: the Google trie implementation we use for move generation
results/: raw results, plots and statistics. Raw data stored and processed in plot.py
run.py: human vs AI mode
scrabblewords.txt: our Scrabble dictionary
selfrun.py: selfplay mode
sga.py: implements stochastic gradient ascent
treeBuilder.py: builds the trie from scrabblewords.txt
trie.p: trie pickle
util.py: utility functions and variables


To use autorun.py, you need quackle
(https://github.com/cjosephson/quackle). Follow the README in the root
to build, and then go to quackle/test and run:

       qmake test.pro && make 

This will create an executable called 'test' in quackle/test. We'll be
running the test program with these options:

./test  --repetitions=N lexicon=cs221 --mode=cs221

This tells the quackle test harness to run N games in cs221 mode with
the cs221 lexicon. The code for cs221 mode is mainly defined in the
function selfPlayCS221Game() inside test/testharness.cpp.

The Python half is in scrabble/autorun.py. It interfaces with the
quackle AI via text files in quackle/test. Quackle's data is written
to quackle/test/quacklegame-n.gcg, which autorun.py reads and
parses. After parsing and committing the quackle move, our AI
calculates its own move, commits it, and writes it to the file
test/quackle/cs221game-n.

To run quackle vs. CS221:

     python autorun.py -n <NUM_GAMES> -p <PATH_TO_QUACKLE_TEST>

Optionally, add a -s flag to suppress ascii-board output, useful when running large batches.

Full PDF writeup: https://web.stanford.edu/class/cs221/2017/restricted/p-final/cajoseph/final.pdf