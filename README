brain.py: the Appel-Jacobsen move generator
agent.py: AI to choose an optimal move
run.py: human vs AI mode
autorun.py: quackle vs CS221 AI mode

To use autorun.py, you need quackle
(https://github.com/cjosephson/quackle). Follow the README in the root
to build, and then go to quackle/test and run:

       qmake test.pro && make 

This will create an executable called 'test' in quackle/test. We'll be
running the test program with these options:

./test  --repetitions=N lexicon=cs221 --mode=cs221

This tells the quackle test harness to run N games in cs221 mode with
the cs221 lexicon. The code for cs221 mode is mainly defined in the
function selfPlayCS221Game() inside test/testharness.cpp.


The Python half is in scrabble/autorun.py. It interfaces with the
quackle AI via text files in quackle/test. Quackle's data is written
to quackle/test/quacklegame-n.gcg, which autorun.py reads and
parses. After parsing and committing the quackle move, our AI
calculates its own move, commits it, and writes it to the file
test/quackle/cs221game-n.

To run quackle vs. CS221:

     python autorun.py -n <NUM_GAMES> -p <PATH_TO_QUACKLE_TEST>

Optionally, add a -s flag to suppress ascii-board output, useful when running large batches. 



TODOs (urgent):
-fix score fxn (12/6 becca)
-rack heuristic (12/6, colleen)
-tile exchange (12/7, colleen)
-finish monte-carlo (12/7, becca)
-collect new data for vanilla, heuristic and MC (12/9, colleen)
-human mode testing + endgame (12/12)
TODOs (If time/as needed):
-autorun.py output sometimes shows mysterious floating words not
 attached to the rest of the crossword structure.
-make autorun.py detect when a file has raced, abort, and tell quackle to move to the next game. this will let us run the full N time trials, instead of running until the first race. If super optimistic, use one file per move OR named pipes for file io (which doesn't have race problem, but needed byte-level file reads)

Preliminary weight vector:
{'A': 142, 'AAA': 94, 'BB': 16, 'EEE': 29, 'L': 204, 'NNN': -59, 'RR': 12, 'TT': 24, 'TTT': 43, 'EE': -327, 'GGG': 8, 'III': 66, 'RRR': 20, 'AA': 163, 'C': 89, 'B': 68, 'E': 225, 'D': 130, 'G': -35, 'F': 29, 'I': 17, 'H': 32, 'K': -50, 'J': 35, 'M': -22, 'vc_ratio': -1077.6666666666665, 'O': 41, 'N': 81, 'Q': -279, 'P': 48, 'S': 60, 'R': 95, 'raw_score': 24565, 'T': 148, 'W': 269, 'V': -22, 'Y': 35, 'X': 3, 'Z': -39, 'OO': 22, 'II': -204, 'WWW': 19, 'QU': -194, 'UUU': -200, 'OOO': -15, 'YYY': 10, 'SSS': 18, 'SS': -10, 'U': 103, 'BBB': 6}

After 100 iterations:
{'AA': -333, 'AAA': 264, 'BB': 15, 'DD': -29, 'WW': -195, 'EEE': 365, 'CCC': -161, 'CC': 44, 'NNN': -140, 'Z': -133, 'RR': -659, 'VVV': 40, 'LL': -164, 'UU': -240, 'TTT': -44, 'EE': -1303, 'GGG': -40, 'PPP': -379, 'LLL': 125, 'III': -253, 'RRR': -107, 'A': 1138, 'C': 19, 'B': 134, 'E': 1806, 'D': 514, 'G': 653, 'F': 347, 'I': 1037, 'H': 360, 'K': 138, 'J': 923, 'M': 482, 'vc_ratio': -4227.833333333332, 'O': 657, 'L': 286, 'II': -940, 'P': 446, 'S': 264, 'R': 109, 'raw_score': 294456, 'T': 1259, 'W': 1523, 'V': 322, 'Y': 674, 'X': 176, 'N': 1132, 'DDD': 274, 'OO': 148, 'Q': 465, 'WWW': -972, 'QU': 201, 'NN': -337, 'SS': -102, 'OOO': 259, 'YYY': 38, 'SSS': 36, 'MMM': 55, 'UUU': -335, 'KKK': 16, 'FFF': 68, 'U': 947, 'HHH': 25, 'TT': 260, 'BBB': 9})
