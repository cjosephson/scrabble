#import numpy as np
import copy
import oracle
import baseline

class Board:
    def __init__(self):
        self.board=[]
        for i in xrange(15):
            self.board.append([(' ') for i in xrange(15)])
        self.dictionary = {}
        #load in dictionary
        f = file('scrabblewords.txt','r')
        for w in f:
            self.dictionary[str.strip(w)] = True

    def __str__(self):
        s = ''
        for i in xrange(len(self.board)):
            s += ("%02d"%(i))+": "+str(self.board[i])+'\n'
        s+="     "
        for i in xrange(15):
            s+=("|%02d| "%(i))
        return s

    '''Given a word, a start point, and an orientation, return a score for
    filling in that word. If the word is invalid (e.g. too long, or
    causes invalid words in the orthogonal dimension), it returns -1.
    '''
    def score(self, word, startPoint, orientation):
        if not self.valid(word, startPoint, orientation):
            return -1
        letterToPoints = {'W':2, 'D':2, 'B':3, 'C':3, 'M':3, 'P':3, 'F':4, 'H':4, 'V':4, 'Y':4,
			  'K':5, 'J':8, 'X':8, 'Q':10, 'Z':10,'A':1, 'E':1, 'I':1, 'O':1, 'N':1, 
			  'R':1, 'T':1, 'L':1, 'S':1, 'U':1, 'G':3}
	s = 0
	for c in word: s+=letterToPoints[c]
	return s	

    def valid(self, word, startPoint, orientation):
        (ci, ri) = startPoint
        if orientation == 'h':
            #check bounds
            if ci + len(word) >= 15:
                #print "fails fit check horizontally"
                return False
            
            #check that the word satisfies column constraints
            row = [i for i in self.board[ri]]
            wi = 0
            l = len(word)
            #print "range",range(ri, ri+len(word))
            for i in xrange(ci, ci+len(word)):
                #print "r[%i], word[%i] = %s, %s"%(i, wi, row[i], word[wi])
                if row[i] == word[wi]:
                    l -= 1
                elif row[i] != ' ' and row[i] != word[wi]:
                    #print "row constraints not satisfied"
                    return False
                row[i] = word[wi]
                wi += 1
            #print "l",l 
            if l > 7:
                return False
            #make sure we don't have any adjacent letters that create
            #a word not in the dictionary
            if not self.validWords(row):
                #print "row validity failed!",row
                return False
            
            #check that we didn't make non-words in the other
            #dimension
            oldrow = self.board[ri]
            self.board[ri] = row
            for i in xrange(15):
                col = self.getCol(i)
                if not self.validWords(col):
                    #print "cross check fails col %i: %s"%(i,col) 
                    self.board[ri] = oldrow
                    return False
            #add row back because we're just doing a validity check
            self.board[ri] = oldrow

                
        elif orientation == 'v':
            #check bounds
            #print "ri, ri+len = %s, %s"%(ri, ri+len(word))
            if ri + len(word) >= 15:
                #print "fails fit check vertically"
                return False
            #check that the word satisfies column constraints
            col = [i for i in self.getCol(ci)]
            wi = 0
            l = len(word)
            #print "range",range(ri, ri+len(word))
            for i in xrange(ri, ri+len(word)):
                if col[i] == word[wi]:
                    l -= 1 
                elif col[i] != ' ' and col[i] != word[wi]:
                    #print "col constraints false"
                    return False
                #print "i, wi = %s,%s"%(i, wi)
                col[i] = word[wi]
                wi += 1
            #print "l",l
            if l > 7:
                return False

            #a word not in the dictionary
            if not self.validWords(col):
                #print "not in dict",col
                return False

            #check that we didn't make non-words in the other
            #dimension
            oldBoard = copy.deepcopy((self.board)) #copy/deep copy might be needed?
            #print "range",range(ri, ri+len(word))
            for i in xrange(ri, ri+len(word)):
                row = self.board[i]
                row[ci] = col[i] #add our new char
                if not self.validWords(row):
                    #print "cross check fails row %i: %s"%(i,row)
                    self.board = oldBoard
                    #print self.__str__()
                    return False
                else:
                    self.board[i] = row
            # return board to original state because we're just doing
            # a validity check
            self.board = oldBoard
        return True
    
    def validWords(self, l):
        for w in ''.join(l).split():
            if w not in self.dictionary and len(w)>1:
                return False
        return True
        
    def getRow(self, ri):
        if ri <15:
            return self.board[ri]
        else: return None

    def getCol(self, ci):
        col = None
        if ci < 15:
            col = [self.board[i][ci] for i in xrange(15)]
        return col
    
b = Board()

b.board[4][4] = ('S')
b.board[5][4] = ('T')
b.board[6][4] = ('A')
b.board[7] = [(' '),(' '),(' '),('U'),('N'),('I'),('V'),('E'),('R'),('S'),('I'),('T'),('Y'),(' '),(' ')]
b.board[8][4] = ('F')
b.board[9][4] = ('O')
b.board[10][4] = ('R')
b.board[11][4] = ('D')
print b
print "score('TREEHOUSES',(11,7), 'v') =? -1"
print b.score('TREEHOUSES',(11,7), 'v')
print "score('TREE',(11,7), 'v') =? -1"
print b.score('TREE',(11,7), 'v')
print "score('TREE',(4,5), 'h')"
print b.score('TREE',(4,5), 'h')
print "score('TREEHOUSES',(4,5), 'h')"
print b.score('TREEHOUSES',(4,5), 'h')
print "score('ACTION',(4,6), 'h')"
print b.score('ACTION',(4,6), 'h')
print "score('INTEGER',(5,7), 'v')"
print b.score('INTEGER',(5,7), 'v')
print "score('RAZZMATAZZES',(4,10), 'h')"
print b.score('RAZZMATAZZES',(4,10), 'h')

ba = baseline.Baseline(b)
ba.baselineMove()

print "Calculating oracle (takes a while...)"
o = oracle.Oracle(b)
o.OracleMove()


#####################################################
# Test Board #2
#####################################################

b2 = Board()

b2.board[7] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('W'),(' '),(' '),(' '),(' ')]
b2.board[6] = [(' '),(' '),(' '),(' '),(' '),(' '),('H'),('E'),('L'),('L'),('O'),(' '),(' '),(' '),(' ')]
b2.board[5] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('R'),(' '),(' '),(' '),(' ')]
b2.board[4] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('L'),(' '),(' '),(' '),(' ')]
b2.board[3] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('D'),(' '),(' '),(' '),(' ')]

#################################################
# Test Board #3
#################################################
b3 = board

b3.board[7] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('R'),(' '),(' '),(' '),(' '),(' '),(' ')]
b3.board[6] = [(' '),(' '),(' '),(' '),(' '),(' '),('S'),('P'),('A'),('R'),('R'),('O'),('W'),(' '),(' ')]
b3.board[5] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('V'),(' '),(' '),(' '),('I'),(' '),(' ')]
b3.board[4] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('E'),(' '),(' '),(' '),('N'),(' '),(' ')]
b3.board[3] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('G'),(' '),(' ')]

################################################
# Test Board #4
################################################
b4 = board

b4.board[7] = [(' '),(' '),(' '),(' '),(' '),(' '),('P'),('A'),('R'),('T'),('Y'),(' '),(' '),(' '),(' ')]
b4.board[6] = [(' '),(' '),(' '),(' '),(' '),(' '),('L'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b4.board[5] = [(' '),(' '),(' '),(' '),(' '),('R'),('A'),('I'),('N'),('B'),('O'),('W'),(' '),(' '),(' ')]
b4.board[4] = [(' '),(' '),(' '),(' '),(' '),(' '),('T'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b4.board[3] = [(' '),(' '),(' '),(' '),(' '),('T'),('E'),('A'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]

################################################
# Test Board #5
################################################
b5 = board

b5.board[9] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b5.board[8] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('G'),(' '),(' '),(' ')]
b5.board[7] = [(' '),(' '),(' '),(' '),(' '),(' '),('W'),(' '),(' '),(' '),(' '),('A'),(' '),(' '),(' ')]
b5.board[6] = [(' '),(' '),(' '),(' '),(' '),(' '),('O'),(' '),(' '),(' '),(' '),('M'),(' '),(' '),(' ')]
b5.board[5] = [(' '),(' '),(' '),(' '),('S'),('C'),('R'),('A'),('B'),('B'),('L'),('E'),(' '),(' '),(' ')]
b5.board[4] = [(' '),(' '),(' '),(' '),(' '),(' '),('D'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b5.board[3] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b5.board[2] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]

################################################
# Test Board #6
################################################
b6 = board

b6.board[14] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[13] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[12] = [(' '),(' '),(' '),(' '),(' '),('T'),('O'),('G'),('A'),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[11] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),('A'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[10] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),('M'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[9]  = [(' '),(' '),(' '),(' '),('F'),('R'),('I'),('E'),('N'),('S'),('S'),(' '),(' '),(' '),(' ')]
b6.board[8]  = [(' '),(' '),('S'),(' '),('U'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[7]  = [(' '),(' '),('W'),('I'),('N'),('N'),('E'),('R'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[6]  = [(' '),(' '),('E'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[5]  = [(' '),(' '),('E'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[4]  = [(' '),(' '),('T'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[3]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[2]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[1]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b6.board[0]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]


################################################
# Test Board #7
################################################
b7 = board

b7.board[14] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[13] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[12] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[11] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[10] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[9]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[8]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[7]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[6]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),('A'),('R'),('E'),(' '),(' '),(' '),(' '),(' ')]
b7.board[5]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('E'),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[4]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('A'),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[3]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('D'),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[2]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('Y'),('O'),('U'),(' '),(' '),(' '),(' ')]
b7.board[1]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b7.board[0]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]

################################################
# Test Board #8
################################################
b8 = board

b8.board[14] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[13] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[12] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[11] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[10] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[9]  = [(' '),(' '),(' '),(' '),(' '),('S'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[8]  = [(' '),(' '),(' '),('B'),('A'),('C'),('K'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[7]  = [(' '),(' '),(' '),(' '),(' '),('H'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[6]  = [(' '),(' '),(' '),(' '),('T'),('O'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[5]  = [(' '),(' '),(' '),(' '),(' '),('O'),(' '),('M'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[4]  = [(' '),(' '),(' '),(' '),(' '),('L'),('E'),('A'),('R'),('N'),(' '),(' '),(' '),(' '),(' ')]
b8.board[3]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),('T'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[2]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),('H'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[1]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b8.board[0]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]

################################################
# Test Board #9
################################################
b9 = board

b9.board[14] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[13] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[12] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[11] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[10] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[9]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[8]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('R'),(' '),(' '),(' ')]
b9.board[7]  = [(' '),(' '),(' '),('T'),('A'),('B'),('L'),('E'),('S'),('P'),('O'),('O'),('N'),(' '),(' ')]
b9.board[6]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('C'),(' '),(' '),(' ')]
b9.board[5]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('K'),(' '),(' '),(' ')]
b9.board[4]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),('S'),(' '),(' '),(' ')]
b9.board[3]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[2]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[1]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
b9.board[0]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]


################################################
# Test Board #A
################################################
bA = board

bA.board[14] = [(' '),(' '),(' '),(' '),('D'),(' '),(' '),(' '),(' '),('T'),('R'),('A'),('V'),('E'),('L')]
bA.board[13] = [(' '),(' '),(' '),(' '),('A'),(' '),(' '),(' '),(' '),(' '),('E'),(' '),(' '),(' '),(' ')]
bA.board[12] = [(' '),('D'),('R'),('I'),('N'),('K'),(' '),(' '),(' '),(' '),('A'),('Y'),('O'),('U'),(' ')]
bA.board[11] = [(' '),(' '),(' '),(' '),('C'),(' '),(' '),('B'),('R'),('I'),('D'),('E'),(' '),(' '),(' ')]
bA.board[10] = [(' '),('B'),('L'),('U'),('E'),(' '),(' '),('I'),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bA.board[9]  = [(' '),('E'),(' '),(' '),(' '),(' '),(' '),('R'),(' '),(' '),(' '),('Q'),(' '),(' '),(' ')]
bA.board[8]  = [('W'),('A'),('F'),('E'),('R'),(' '),(' '),('T'),(' '),(' '),(' '),('U'),(' '),(' '),(' ')]
bA.board[7]  = [(' '),('T'),(' '),(' '),(' '),(' '),('C'),('H'),('A'),('N'),('T'),('I'),('N'),('G'),(' ')]
bA.board[6]  = [(' '),('L'),(' '),(' '),(' '),(' '),(' '),('D'),(' '),('O'),(' '),('Z'),(' '),(' '),(' ')]
bA.board[5]  = [('F'),('E'),('A'),('S'),('T'),(' '),(' '),('A'),(' '),('T'),(' '),(' '),(' '),(' '),(' ')]
bA.board[4]  = [(' '),('S'),(' '),('H'),('A'),('P'),('P'),('Y'),(' '),('E'),(' '),(' '),(' '),(' '),(' ')]
bA.board[3]  = [(' '),(' '),(' '),('O'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bA.board[2]  = [(' '),(' '),('S'),('W'),('I'),('M'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bA.board[1]  = [(' '),(' '),(' '),('E'),(' '),('E'),('N'),('J'),('O'),('Y'),(' '),(' '),(' '),(' '),(' ')]
bA.board[0]  = [(' '),(' '),(' '),('R'),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]

################################################
# Test Board #N
################################################
bN = board

bN.board[14] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[13] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[12] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[11] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[10] = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[9]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[8]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[7]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[6]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[5]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[4]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[3]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[2]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[1]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]
bN.board[0]  = [(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' '),(' ')]